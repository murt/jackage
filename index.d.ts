// Generated by dts-bundle v0.7.3

declare module 'jackage' {
    import JKGCompiler from "jackage/compiler";
    const _default: {
        JKGCompiler: typeof JKGCompiler;
    };
    export = _default;
}

declare module 'jackage/compiler' {
    import { IJKGConfig } from "jackage/config";
    import { IJKGCompilerEventContext, JKGCompilerEvent, JKGLogLevel } from "jackage/types";
    /**
        * Primary class for compilation. This is the main type to instantiate
        * and bundle your resources with.
        */
    export default class JKGCompiler {
            config: IJKGConfig;
            constructor(config: IJKGConfig);
            run(): Promise<void>;
            /**
                * Listen for events that are dispatched by the compiler instance.
                *
                * @param event The name of the event to listen for.
                * @param callback Callback function that will be added to the list of handlers for this event.
                */
            on(event: JKGCompilerEvent, callback: JKGCompilerEventHandler): JKGCompiler;
            /**
                * Logs a message via the compiler's event system. Note that this is "technically" an asynchronous function as
                * the event pipeline is async.
                *
                * @param level The level that this message will be logged at.
                * @param message The content of the message to log.
                */
            log(level: JKGLogLevel, message: string): Promise<void>;
    }
    /**
        * Compiler callbacks are assigned to events.
        */
    export type JKGCompilerEventHandler = (context: IJKGCompilerEventContext) => void | Promise<void>;
}

declare module 'jackage/config' {
    /**
        * Configures a Jackage compiler instance.
        */
    export interface IJKGConfig {
            targets: IJKGTarget[];
    }
    /**
        * Describes an output target and the rules for generating it.
        */
    export interface IJKGTarget {
            /**
                * File to begin compiling from.
                */
            entry: string;
            /**
                * Whether or not warnings are fatal. While errors are always considered fatal
                */
            fatalWarnings: boolean;
    }
    /**
        * Describes a pipe function.
        */
    export type IJKGPipe = (source: string, config: any, context: IJKGPipeContext) => string;
    /**
        * The context provided to each invokation of a pipe function.
        */
    export interface IJKGPipeContext {
            /**
                * The file currently being loaded.
                */
            file: string;
            /**
                * Whether or not this pipe has been configured to be deferred until after explicit pipes.
                */
            deferred: boolean;
            /**
                * The list of pipes this file will be affected by, including this pipe.
                */
            pipes: string[];
    }
}

declare module 'jackage/types' {
    import JKGCompiler from "jackage/compiler";
    export const enum JKGLogLevel {
            Debug = "debug",
            Info = "info"
    }
    /**
        * Set of valid events that the compiler will dispatch event handling for.
        */
    export const enum JKGCompilerEvent {
            /**
                * This event is dispatched whenever a log entry is published. By default Jackage is silent - listening for this
                * event is the only way get log messages out of the compiler and print them.
                */
            Log = "log",
            /**
                * The compiler has just called [[JKGCompiler.run]] - this event is dispatched quite literally before any other
                * functionality in the "run" function.
                */
            Starting = "starting",
            /**
                * The compiler is running, configuration has been validated, and all entry point source files have been gathered.
                * This event is dispatched immediately before any actual processing of source files occurs.
                */
            Started = "started"
    }
    /**
        * All compiler events have context.
        */
    export interface IJKGCompilerEventContext {
            /**
                * The event being dispatched that generated this context.
                */
            event: JKGCompilerEvent;
            /**
                * Reference to the compiler instance that generated this context. This is also the preferred way of publishing
                * a log entry as [[JKGCompiler.log]] can be called on this object.
                */
            compiler: JKGCompiler;
    }
}

