// Generated by dts-bundle v0.7.3

declare module 'jackage' {
    import JKGCompiler from "jackage/compiler";
    const _default: {
        JKGCompiler: typeof JKGCompiler;
    };
    export = _default;
}

declare module 'jackage/compiler' {
    import { IJKGConfig } from "jackage/config";
    import { JKGCompilerEvent } from "jackage/types";
    /**
        * Primary class for compilation. This is the main type to instantiate
        * and bundle your resources with.
        */
    export default class JKGCompiler {
            config: IJKGConfig;
            constructor(config: IJKGConfig);
            run(): Promise<void>;
            /**
                * Listen for events that are dispatched by the compiler instance.
                *
                * @param event The name of the event to listen for.
                * @param callback Callback function that will be added to the list of handlers for this event.
                */
            on(event: JKGCompilerEvent, callback: JKGCompilerEventHandler): JKGCompiler;
    }
    /**
        * Compiler callbacks are assigned to events.
        */
    export type JKGCompilerEventHandler = (event: JKGCompilerEvent, compiler: JKGCompiler) => void | Promise<void>;
}

declare module 'jackage/config' {
    /**
        * Configures a Jackage compiler instance.
        */
    export interface IJKGConfig {
            targets: IJKGTarget[];
    }
    /**
        * Describes an output target and the rules for generating it.
        */
    export interface IJKGTarget {
            /**
                * File to begin compiling from.
                */
            entry: string;
            /**
                * Whether or not warnings are fatal. While errors are always considered fatal
                */
            fatalWarnings: boolean;
    }
    /**
        * Describes a pipe function.
        */
    export type IJKGPipe = (source: string, config: any, context: IJKGPipeContext) => string;
    /**
        * The context provided to each invokation of a pipe function.
        */
    export interface IJKGPipeContext {
            /**
                * The file currently being loaded.
                */
            file: string;
            /**
                * Whether or not this pipe has been configured to be deferred until after explicit pipes.
                */
            deferred: boolean;
            /**
                * The list of pipes this file will be affected by, including this pipe.
                */
            pipes: string[];
    }
}

declare module 'jackage/types' {
    /**
      * Set of valid events that the compiler will dispatch event handling for.
      */
    export const enum JKGCompilerEvent {
        Starting = "starting",
        Started = "started",
        Log = "log"
    }
}

